on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: [dev]

jobs:
  validate-branch-to-qa-org:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Java (JDK 17) # PMD needs Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Salesforce CLI + Scanner
        run: |
          npm i -g @salesforce/cli
          sf plugins install @salesforce/sfdx-scanner
          sf --version

      # sfdx shim for sfdx-git-delta
      - name: Install legacy SFDX (shim for sgd)
        run: npm i -g sfdx-cli

      - name: Populate auth file
        run: echo "${{ secrets.SFDX_QA_URL }}" > ./SFDX_QA_URL.txt

      - name: Authenticate to target SF Org
        run: sf org login sfdx-url -f ./SFDX_QA_URL.txt -a qa

      - name: Create delta packages (PR base ↔ head)
        run: |
          BASE=${{ github.event.pull_request.base.sha }}
          HEAD=${{ github.sha }}
          mkdir -p changed-sources
          sfdx plugins:install sfdx-git-delta
          sfdx sgd:source:delta --from "$BASE" --to "$HEAD" \
            --output changed-sources/ --generate-delta --source force-app/

      - name: Detect empty delta
        id: delta
        run: |
          if [ ! -s changed-sources/package/package.xml ] || ! grep -q "<types>" changed-sources/package/package.xml; then
            echo "empty=true" >> $GITHUB_OUTPUT
          else
            echo "empty=false" >> $GITHUB_OUTPUT
          fi

      # Static analysis (optional but mirrors ADO)
      - name: Run PMD + ESLint-LWC
        run: |
          mkdir -p pmd-report lwc-report
          sf scanner run --target "force-app" --engine pmd \
            --outfile "pmd-report/pmd-analysis.csv" --format csv
          sf scanner run --target "force-app/main/default/lwc/**/*" --engine eslint-lwc \
            --outfile "lwc-report/lwc-analysis.csv" --format csv

      # Prefer validating the delta (fast)
      - name: Validate delta with tests + reports
        if: steps.delta.outputs.empty == 'false'
        run: |
          sf project deploy validate \
            --manifest "changed-sources/package/package.xml" \
            --target-org qa \
            --test-level RunLocalTests \
            --coverage-formatters cobertura \
            --junit \
            --results-dir coverage

      # If delta is empty, still produce reports by running tests explicitly
      - name: Fallback: run Apex tests to produce JUnit & Cobertura
        if: steps.delta.outputs.empty == 'true'
        run: |
          mkdir -p coverage
          sf apex run test \
            --test-level RunLocalTests \
            --code-coverage \
            --result-format junit \
            --output-dir coverage \
            --wait 60 \
            --target-org qa || true

      - name: Inspect results (debug)
        if: always()
        run: |
          echo "== coverage tree ==" && (ls -R coverage || true)

      - name: Upload PMD report
        uses: actions/upload-artifact@v4
        with:
          name: PMDAnalysisReport
          path: pmd-report/pmd-analysis.csv

      - name: Upload LWC report
        uses: actions/upload-artifact@v4
        with:
          name: LWCAnalysisReport
          path: lwc-report/lwc-analysis.csv

      - name: Publish JUnit to PR Checks
        if: always() && hashFiles('coverage/junit/*.xml') != ''
        uses: dorny/test-reporter@v1
        with:
          name: Apex Tests
          path: coverage/junit/*.xml
          reporter: java-junit

      - name: Coverage summary (Cobertura → PR summary)
        id: covsum
        if: always() && hashFiles('coverage/coverage/cobertura.xml') != ''
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/coverage/cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Add coverage to Job Summary
        if: always() && hashFiles('**/code-coverage-results.md') != ''
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
