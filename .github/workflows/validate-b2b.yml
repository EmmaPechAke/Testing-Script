name: Validate Pull Request

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: [dev]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  validate-branch-to-qa-org:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}

    steps:
      - uses: actions/checkout@v4
        with:
          # get full history so merge-base works and SHAs can be fetched
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      # Tooling
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Salesforce CLIs and plugins (non-interactive)
        run: |
          npm i -g @salesforce/cli sfdx-cli
          # allow unsigned plugin prompts for CI
          mkdir -p "$HOME/.config/sf" "$HOME/.config/sfdx"
          printf '["sfdx-git-delta"]\n' > "$HOME/.config/sf/unsignedPluginAllowList.json"
          printf '["sfdx-git-delta"]\n' > "$HOME/.config/sfdx/unsignedPluginAllowList.json"
          # install plugins
          yes | sfdx plugins:install sfdx-git-delta
          sf plugins install @salesforce/sfdx-scanner
          sfdx --version && sfdx plugins
          sf --version && sf plugins

      # Auth
      - name: Populate auth file
        run: echo "${{ secrets.SFDX_QA_URL }}" > ./SFDX_QA_URL.txt
      - name: Authenticate to target SF Org
        run: sf org login sfdx-url -f ./SFDX_QA_URL.txt -a qa

      # --- FIX: ensure/resolve BASE SHA locally ---
      - name: Resolve base SHA (fetch or merge-base fallback)
        id: base
        shell: bash
        run: |
          set -euo pipefail
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          # fetch the base branch and the exact base commit
          git fetch --no-tags --prune origin +refs/heads/${BASE_REF}:refs/remotes/origin/${BASE_REF}
          git fetch --no-tags --prune --depth=1 origin ${BASE_SHA}:${BASE_SHA} || true
          if git cat-file -e "${BASE_SHA}^{commit}" 2>/dev/null; then
            USE_SHA="${BASE_SHA}"
          else
            echo "Base SHA not found locally; computing via merge-base with origin/${BASE_REF}"
            USE_SHA="$(git merge-base "origin/${BASE_REF}" "${GITHUB_SHA}")"
          fi
          echo "sha=${USE_SHA}" >> "$GITHUB_OUTPUT"
          echo "Using base commit: ${USE_SHA}"

      # Delta
      - name: Create delta packages (PR base ↔ head)
        run: |
          BASE=${{ steps.base.outputs.sha }}
          HEAD=${{ github.sha }}
          mkdir -p changed-sources
          sfdx sgd:source:delta \
            --from "$BASE" \
            --to "$HEAD" \
            --output changed-sources/ \
            --generate-delta \
            --source force-app/

      - name: Detect empty delta
        id: delta
        run: |
          if [ ! -s changed-sources/package/package.xml ] || ! grep -q "<types>" changed-sources/package/package.xml; then
            echo "empty=true" >> $GITHUB_OUTPUT
          else
            echo "empty=false" >> $GITHUB_OUTPUT
          fi

      # Static analysis (optional but useful)
      - name: Run PMD + ESLint-LWC
        run: |
          mkdir -p pmd-report lwc-report
          sf scanner run --target "force-app" --engine pmd \
            --outfile "pmd-report/pmd-analysis.csv" --format csv
          sf scanner run --target "force-app/main/default/lwc/**/*" --engine eslint-lwc \
            --outfile "lwc-report/lwc-analysis.csv" --format csv

      # Validate (runs tests) -> produce JUnit + Cobertura under coverage/
      - name: Validate delta with tests + reports
        if: steps.delta.outputs.empty == 'false'
        run: |
          sf project deploy validate \
            --manifest "changed-sources/package/package.xml" \
            --target-org qa \
            --test-level RunLocalTests \
            --coverage-formatters cobertura \
            --junit \
            --results-dir coverage

      # Fallback when no metadata changed: still run tests to get reports
      - name: Run Apex tests to produce JUnit & Cobertura (fallback)
        if: steps.delta.outputs.empty == 'true'
        run: |
          mkdir -p coverage
          sf apex run test \
            --test-level RunLocalTests \
            --code-coverage \
            --result-format junit \
            --output-dir coverage \
            --wait 60 \
            --target-org qa || true

      # Visuals in PR / Job Summary
      - name: Publish JUnit to PR Checks
        if: always() && hashFiles('coverage/junit/*.xml') != ''
        uses: dorny/test-reporter@v1
        with:
          name: Apex Tests
          path: coverage/junit/*.xml
          reporter: java-junit

      - name: Coverage summary (Cobertura → PR Summary)
        if: always() && hashFiles('coverage/coverage/cobertura.xml') != ''
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/coverage/cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Add coverage to Job Summary
        if: always() && hashFiles('code-coverage-results.md') != ''
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      # Artifacts (optional)
      - name: Upload PMD report
        if: always() && hashFiles('pmd-report/pmd-analysis.csv') != ''
        uses: actions/upload-artifact@v4
        with:
          name: PMDAnalysisReport
          path: pmd-report/pmd-analysis.csv

      - name: Upload LWC report
        if: always() && hashFiles('lwc-report/lwc-analysis.csv') != ''
        uses: actions/upload-artifact@v4
        with:
          name: LWCAnalysisReport
          path: lwc-report/lwc-analysis.csv
